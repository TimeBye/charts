expose:
  # Set the way how to expose the service. Set the type as "ingress","clusterIP","loadBalancer"
  # or "nodePort" and fill the information in the corresponding 
  # section
  type: ingress
  tls:
    enabled: false
    # Fill the name of secret if you want to use your own TLS certificate
    # and private key. The secret must contain keys named tls.crt and 
    # tls.key that contain the certificate and private key to use for TLS
    # The certificate and private key will be generated automatically if 
    # it is not set
    secretName: ""
    certExpiry: 3560
  ingress:
    host: hackmd.cluster.local
    annotations:
      ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      ingress.kubernetes.io/proxy-body-size: "0"
      nginx.ingress.kubernetes.io/proxy-body-size: "0"
      # kubernetes.io/tls-acme: "true"
  clusterIP:
    # The name of ClusterIP service
    # name: hackmd
    # The service port hackmd listens on when serving with HTTP
    port: 3000
  nodePort:
    # The name of NodePort service
    # name: hackmd
    # The service port hackmd listens on when serving with HTTP
    port: 3000
    # The node port hackmd listens on when serving with HTTP
    # nodePort: 30008
  loadBalancer:
    # The name of LoadBalancer service
    # name: hackmd
    # The service port hackmd listens on when serving with HTTP
    port: 3000

# The persistence is enabled by default and a default StorageClass
# is needed in the k8s cluster to provision volumes dynamicly. 
# Specify another StorageClass in the "storageClass" or set "existingClaim"
# if you have already existing persistent volumes to use
persistence:
  enabled: true
  # Setting it to "keep" to avoid removing PVCs during a helm delete 
  # operation. Leaving it empty will delete PVCs after the chart deleted
  resourcePolicy: "keep"
  persistentVolumeClaim:
    core:
      # Use the existing PVC which must be created manually before bound
      existingClaim: ""
      # Specify the "storageClass" used to provision the volume. Or the default
      # StorageClass will be used(the default).
      # Set it to "-" to disable dynamic provisioning
      storageClass: ""
      subPath: ""
      accessMode: ReadWriteMany
      size: 5Gi
    # If external database is used, the following settings for database will 
    # be ignored
    database:
      existingClaim: ""
      storageClass: ""
      subPath: ""
      accessMode: ReadWriteOnce
      size: 1Gi

imagePullPolicy: IfNotPresent

core:
  image:
    repository: nabo.codimd.dev/hackmdio/hackmd
    tag: 1.4.1
  replicas: 1
  ## Additional deployment annotations
  podAnnotations: {}
  # resources:
  #  requests:
  #    memory: 256Mi
  #    cpu: 100m
  nodeSelector: {}
  tolerations: []
  affinity: soft
  env:
    # DEBUG: true
    TZ: Asia/Shanghai
    CMD_USECDN: false
    # CMD_EMAIL: false
    # CMD_ALLOW_ANONYMOUS: false
    # CMD_ALLOW_EMAIL_REGISTER: false
    # CMD_OAUTH2_BASEURL: https://api.choerodon.com.cn
    # CMD_OAUTH2_USER_PROFILE_URL: https://api.choerodon.com.cn/base/v1/users/self
    # CMD_OAUTH2_USER_PROFILE_USERNAME_ATTR: loginName
    # CMD_OAUTH2_USER_PROFILE_DISPLAY_NAME_ATTR: realName
    # CMD_OAUTH2_USER_PROFILE_EMAIL_ATTR: email
    # CMD_OAUTH2_TOKEN_URL: https://api.choerodon.com.cn/oauth/oauth/token
    # CMD_OAUTH2_AUTHORIZATION_URL: https://api.choerodon.com.cn/oauth/oauth/authorize
    # CMD_OAUTH2_CLIENT_ID: hackmd
    # CMD_OAUTH2_CLIENT_SECRET: secret
    # CMD_OAUTH2_PROVIDERNAME: Choerodon

database:
  # if external database is used, set "type" to "external"
  # and fill the connection informations in "external" section
  type: internal
  internal:
    # You can configure this image to use PostgreSQL.
    image:
      repository: dockerhub.azk8s.cn/sameersbn/postgresql
      tag: 10-2
    # The initial superuser password for internal database
    password: "changeit"
    ## Additional deployment annotations
    podAnnotations: {}
    # resources:
    #  requests:
    #    memory: 256Mi
    #    cpu: 100m
    nodeSelector: {}
    tolerations: []
    affinity: {}
  external:
    # hackmd uses a database backend to store its data. 
    host: "192.168.0.1"
    port: "5432"
    username: "user"
    password: "password"
    databaseName: "hackmdhq_production"